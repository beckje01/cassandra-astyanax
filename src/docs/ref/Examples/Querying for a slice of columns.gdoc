h1. Querying for a Slice of Columns

h2. Standard Astyanax

Returns [com.netflix.astyanax.model.ColumnList<String>|http://netflix.github.com/astyanax/javadoc/com/netflix/astyanax/model/ColumnList.html]

{code}
def rowKey = "xxx-1"
def result = astyanaxService.keyspace().prepareQuery("Standard1")
    .getKey(rowKey)
    .withColumnRange(new RangeBuilder().setStart("ColumnName1").setEnd("ColumnNameX").setMaxSize(100).build())
    .execute()
    .result
{code}

h2. Alternate Form

Returns [com.netflix.astyanax.model.ColumnList<String>|http://netflix.github.com/astyanax/javadoc/com/netflix/astyanax/model/ColumnList.html]

{code}
def rowKey = "xxx-1"
def result = astyanaxService.keyspace().prepareQuery("Standard1")
    .getKey(rowKey)
    .withColumnRange("ColumnName1","ColumnNameN",false, 100)
    .execute()
    .result
{code}

h2. Return a Map of Columns

Returns java.util.Map<String, [com.netflix.astyanax.model.Column<String>|http://netflix.github.com/astyanax/javadoc/com/netflix/astyanax/model/Column.html]>

{code}
def rowKey = "xxx-1"
def result = astyanaxService.keyspace().prepareQuery("Standard1")
    .getKey(rowKey)
    .withColumnRange("ColumnName1","ColumnNameN",false, 100)
    .execute()
    .result
    .toMap()
{code}

h2. Return a Map of Strings

Returns java.util.Map<String, String>

{code}
def rowKey = "xxx-1"
def result = astyanaxService.keyspace().prepareQuery("Standard1")
    .getKey(rowKey)
    .withColumnRange("ColumnName1","ColumnNameN",false, 100)
    .execute()
    .result
    .toStringMap()
{code}

h2. Return a Map of Longs

Returns java.util.Map<String, Long>

{code}
def rowKey = "xxx-1"
def result = astyanaxService.keyspace().prepareQuery("Standard1")
    .getKey(rowKey)
    .withColumnRange("ColumnName1","ColumnNameN",false, 100)
    .execute()
    .result
    .toLongMap()
{code}



